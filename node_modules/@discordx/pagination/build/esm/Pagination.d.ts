import type { CacheType, InteractionCollector, TextBasedChannel } from "discord.js";
import { Message, MessageComponentInteraction } from "discord.js";
import type { PaginationResolver } from "./Resolver.js";
import type { IGeneratePage, PaginationInteractions, PaginationItem, PaginationOptions } from "./types.js";
export declare class Pagination<T extends PaginationResolver = PaginationResolver> {
    sendTo: PaginationInteractions | Message | TextBasedChannel;
    embeds: PaginationItem[] | T;
    maxLength: number;
    currentPage: number;
    option: PaginationOptions;
    collector?: InteractionCollector<MessageComponentInteraction<CacheType>>;
    message?: Message;
    private _isSent;
    private _isFollowUp;
    get isSent(): boolean;
    constructor(sendTo: PaginationInteractions | Message | TextBasedChannel, embeds: PaginationItem[] | T, config?: PaginationOptions);
    /**
     * Get page
     * @param page
     * @returns
     */
    getPage: (page: number) => Promise<IGeneratePage | undefined>;
    /**
     * Send pagination
     * @returns
     */
    send(): Promise<{
        collector: InteractionCollector<MessageComponentInteraction<CacheType>>;
        message: Message;
    }>;
}
