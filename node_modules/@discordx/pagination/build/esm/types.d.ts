import type { CommandInteraction, ContextMenuInteraction, EmojiIdentifierResolvable, InteractionButtonOptions, InteractionReplyOptions, Message, MessageActionRow, MessageComponentInteraction, MessageEmbed, MessageOptions } from "discord.js";
export declare const defaultTime = 1800000;
export declare const defaultIds: {
    buttons: {
        end: string;
        exit: string;
        next: string;
        previous: string;
        start: string;
    };
    menu: string;
};
export declare type PaginationItem = string | MessageEmbed | MessageOptions;
export declare type PaginationInteractions = CommandInteraction | MessageComponentInteraction | ContextMenuInteraction;
interface BasicPaginationOptions {
    /**
     * Enable exit button, It will close the pagination before timeout
     */
    enableExit?: boolean;
    /**
     * Set ephemeral response
     */
    ephemeral?: boolean;
    /**
     * Initial page (default: 0)
     */
    initialPage?: number;
    /**
     * Pagination timeout callback
     */
    onTimeout?: (page: number, message: Message) => void;
    /**
     * Show start/end buttons for large list (items more then 10) (default: true)
     */
    showStartEnd?: boolean;
    /**
     * In milliseconds, how long should the paginator run. (Default: 30min)
     */
    time?: number;
}
interface ButtonOptions {
    /**
     * Button emoji
     */
    emoji?: EmojiIdentifierResolvable;
    /**
     * Button id
     */
    id?: string;
    /**
     * Button label
     */
    label?: string;
    /**
     * Button style
     */
    style?: InteractionButtonOptions["style"];
}
interface ButtonPaginationOptions extends BasicPaginationOptions {
    /**
     * End button options
     */
    end?: ButtonOptions;
    /**
     * Exit button options
     */
    exit?: ButtonOptions;
    /**
     * Exit button options
     */
    next?: ButtonOptions;
    /**
     * Previous button options
     */
    previous?: ButtonOptions;
    /**
     * Start button options
     */
    start?: ButtonOptions;
    /**
     * select pagination type (default: BUTTON)
     */
    type: "BUTTON";
}
interface SelectMenuPaginationOptions extends BasicPaginationOptions {
    /**
     * Various labels
     */
    labels?: {
        end?: string;
        exit?: string;
        start?: string;
    };
    /**
     * custom select menu id (default: 'discordx@pagination@menu')
     */
    menuId?: string;
    /**
     * Define page text, use `{page}` to print page number
     * Different page texts can also be defined for different items using arrays
     */
    pageText?: string | string[];
    /**
     * Set placeholder text
     */
    placeholder?: string;
    /**
     * select pagination type (default: BUTTON)
     */
    type: "SELECT_MENU";
}
export declare type PaginationOptions = ButtonPaginationOptions | SelectMenuPaginationOptions;
export interface IPaginate {
    currentPage: number;
    endIndex: number;
    endPage: number;
    pageSize: number;
    pages: number[];
    startIndex: number;
    startPage: number;
    totalItems: number;
    totalPages: number;
}
export declare type IGeneratePage = {
    newMessage: InteractionReplyOptions;
    paginationRow: MessageActionRow;
};
export {};
