"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashOption = void 0;
const internal_1 = require("@discordx/internal");
const index_js_1 = require("../../index.js");
function SlashOption(name, params) {
    return function (target, key, index) {
        const dType = Reflect.getMetadata("design:paramtypes", target, key)[index].name.toUpperCase();
        const type = params?.type ??
            (dType === "GUILDMEMBER"
                ? "USER"
                : dType === "TEXTCHANNEL" || dType === "VOICECHANNEL"
                    ? "CHANNEL"
                    : dType);
        // throw error if option type is invalid
        if (!index_js_1.SlashOptionTypes.includes(type)) {
            throw Error(`invalid slash option: ${type}\nSupported types are: ${index_js_1.SlashOptionTypes.join(", ")}`);
        }
        const option = index_js_1.DApplicationCommandOption.create(name, params?.autocomplete, params?.channelTypes, params?.description, index, params?.maxValue, params?.minValue, params?.required, type).decorate(target.constructor, key, target[key], target.constructor, index);
        index_js_1.MetadataStorage.instance.addModifier(internal_1.Modifier.create((original) => {
            original.options = [...original.options, option];
        }, index_js_1.DApplicationCommand).decorate(target.constructor, key, target[key], target.constructor, index));
        index_js_1.MetadataStorage.instance.addApplicationCommandSlashOption(option);
    };
}
exports.SlashOption = SlashOption;
//# sourceMappingURL=SlashOption.js.map