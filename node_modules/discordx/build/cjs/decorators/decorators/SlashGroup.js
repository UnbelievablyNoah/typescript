"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashGroup = void 0;
const internal_1 = require("@discordx/internal");
const index_js_1 = require("../../index.js");
function SlashGroup(groupOrSubcommands, subCommandsOrDescription, subCommands) {
    return function (target, key, descriptor) {
        const myClass = target;
        if (typeof groupOrSubcommands === "string" && key) {
            // If @SlashGroup decorate a method edit the method and add it to subgroup
            index_js_1.MetadataStorage.instance.addModifier(internal_1.Modifier.create((original) => {
                if (original.type === "CHAT_INPUT") {
                    original.subgroup = groupOrSubcommands;
                }
            }, index_js_1.DApplicationCommand).decorate(myClass.constructor, key));
        }
        if (!descriptor) {
            if (typeof groupOrSubcommands === "string") {
                const group = index_js_1.DApplicationCommandGroup.create(groupOrSubcommands, {
                    description: typeof subCommandsOrDescription === "string"
                        ? subCommandsOrDescription
                        : undefined,
                }).decorate(myClass, key ?? myClass.name);
                index_js_1.MetadataStorage.instance.addApplicationCommandSlashGroups(group);
            }
            // Create a subgroup if @SlashGroup decorate a method
            if (subCommands) {
                Object.keys(subCommands).forEach((subKey) => {
                    const group = index_js_1.DApplicationCommandGroup.create(subKey, {
                        description: subCommands?.[subKey],
                    }).decorate(myClass, myClass.name);
                    index_js_1.MetadataStorage.instance.addApplicationCommandSlashSubGroups(group);
                });
            }
        }
    };
}
exports.SlashGroup = SlashGroup;
//# sourceMappingURL=SlashGroup.js.map