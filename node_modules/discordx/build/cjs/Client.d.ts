import type { ApplicationCommand, AutocompleteInteraction, ButtonInteraction, Collection, CommandInteraction, ContextMenuInteraction, Interaction, Message, SelectMenuInteraction, Snowflake } from "discord.js";
import { Client as ClientJS } from "discord.js";
import type { ClientOptions, DApplicationCommand, DApplicationCommandGroup, DApplicationCommandOption, DComponentButton, DComponentSelectMenu, DDiscord, DiscordEvents, DOn, DSimpleCommand, GuardFunction, IGuild, InitCommandConfig, IPrefix, IPrefixResolver, ISimpleCommandByName, SimpleCommandConfig } from "./index.js";
import { MetadataStorage, SimpleCommandMessage } from "./index.js";
/**
 * Extend original client class of discord.js
 * @param options object
 * ___
 * [View Documentation](https://discord-ts.js.org/docs/general/client)
 */
export declare class Client extends ClientJS {
    private _botId;
    private _prefix;
    private _simpleCommandConfig?;
    private _silent;
    private _botGuilds;
    private _guards;
    private logger;
    static get applicationCommandSlashesFlat(): readonly DApplicationCommand[];
    static get applicationCommandSlashes(): readonly DApplicationCommand[];
    static get applicationCommandUsers(): readonly DApplicationCommand[];
    static get applicationCommandMessages(): readonly DApplicationCommand[];
    static get applicationCommandSlashOptions(): readonly DApplicationCommandOption[];
    static get applicationCommands(): readonly DApplicationCommand[];
    static get applicationCommandSlashGroups(): readonly DApplicationCommandGroup[];
    static get applicationCommandSlashSubGroups(): readonly DApplicationCommandGroup[];
    static get simpleCommandsByName(): readonly ISimpleCommandByName[];
    static get simpleCommandsByPrefix(): Map<string, ISimpleCommandByName[]>;
    static get simpleCommands(): readonly DSimpleCommand[];
    static get selectMenuComponents(): readonly DComponentSelectMenu[];
    static get buttonComponents(): readonly DComponentButton[];
    static get events(): readonly DOn[];
    static get discords(): readonly DDiscord[];
    static get instance(): MetadataStorage;
    get applicationCommandSlashes(): readonly DApplicationCommand[];
    get applicationCommandSlashesFlat(): readonly DApplicationCommand[];
    get applicationCommandSlashOptions(): readonly DApplicationCommandOption[];
    get applicationCommandSlashGroups(): readonly DApplicationCommandGroup[];
    get applicationCommandSlashSubGroups(): readonly DApplicationCommandGroup[];
    get applicationCommandUsers(): readonly DApplicationCommand[];
    get applicationCommandMessages(): readonly DApplicationCommand[];
    get applicationCommands(): readonly DApplicationCommand[];
    get simpleCommandsByName(): readonly ISimpleCommandByName[];
    get simpleCommandsByPrefix(): Map<string, ISimpleCommandByName[]>;
    get simpleCommands(): readonly DSimpleCommand[];
    get selectMenuComponents(): readonly DComponentSelectMenu[];
    get buttonComponents(): readonly DComponentButton[];
    get events(): readonly DOn[];
    get discords(): readonly DDiscord[];
    get instance(): MetadataStorage;
    get botResolvedGuilds(): Promise<string[]>;
    get botGuilds(): IGuild[];
    set botGuilds(value: IGuild[]);
    get guards(): GuardFunction[];
    set guards(value: GuardFunction[]);
    get prefix(): IPrefixResolver;
    set prefix(value: IPrefixResolver);
    get simpleCommandConfig(): SimpleCommandConfig | undefined;
    set simpleCommandConfig(value: SimpleCommandConfig | undefined);
    get botId(): string;
    set botId(value: string);
    get silent(): boolean;
    set silent(value: boolean);
    /**
     * Extend original client class of discord.js
     * @param options object
     * ___
     * [View Documentation](https://discord-ts.js.org/docs/general/client)
     */
    constructor(options: ClientOptions);
    /**
     * Start your bot
     * @param token The bot token
     */
    login(token: string, log?: boolean): Promise<string>;
    /**
     * Print information about all events and commands to your console
     */
    printDebug(): void;
    /**
     * Get commands mapped by guildid (in case of multi bot, commands are filtered for this client only)
     * @returns
     */
    CommandByGuild(): Promise<Map<string, DApplicationCommand[]>>;
    /**
     * Initialize all the @Slash with their permissions
     */
    initApplicationCommands(options?: {
        global?: InitCommandConfig;
        guild?: InitCommandConfig;
    }): Promise<void>;
    /**
     * init application commands for guild
     * @param guildId
     * @param DCommands
     * @param log
     */
    initGuildApplicationCommands(guildId: string, DCommands: DApplicationCommand[], options?: InitCommandConfig): Promise<void>;
    /**
     * init global application commands
     * @param log
     */
    initGlobalApplicationCommands(options?: InitCommandConfig): Promise<void>;
    /**
     * init all guild command permissions
     */
    initApplicationPermissions(log?: boolean): Promise<void>;
    /**
     * Update application commands permission by GuildId
     * @param guildId guild id
     * @param DCommands commands
     */
    initGuildApplicationPermissions(guildId: string, DCommands: DApplicationCommand[], log?: boolean): Promise<void>;
    /**
     * Fetch the existing application commands of a guild or globally
     * @param guild The guild id (empty -> globally)
     * @returns
     */
    fetchApplicationCommands(guildId?: Snowflake): Promise<Collection<string, ApplicationCommand>> | undefined;
    /**
     * Clear the application commands globally or for some guilds
     * @param guilds The guild Ids (empty -> globally)
     */
    clearApplicationCommands(...guilds: Snowflake[]): Promise<void>;
    /**
     * Get the group tree of an slash interaction
     * /hello => ["hello"]
     * /test hello => ["test", "hello"]
     * /test hello me => ["test", "hello", "me"]
     * @param interaction The targeted slash interaction
     * @returns
     */
    getApplicationCommandGroupTree(interaction: CommandInteraction | AutocompleteInteraction): string[];
    /**
     * Return the corresponding @Slash from a tree
     * @param tree
     * @returns
     */
    getApplicationCommandFromTree(tree: string[]): DApplicationCommand | undefined;
    /**
     * Execute all types of interaction
     * @param interaction Interaction
     * @param log {boolean}
     * @returns
     */
    executeInteraction(interaction: Interaction, log?: boolean): Awaited<unknown>;
    /**
     * Execute command interacton
     * @param interaction CommandInteraction | AutocompleteInteraction
     * @param log {boolean}
     * @returns
     */
    executeCommandInteraction(interaction: CommandInteraction | AutocompleteInteraction, log?: boolean): Awaited<unknown>;
    /**
     * Execute button interacton
     * @param interaction ButtonInteraction
     * @param log {boolean}
     * @returns
     */
    executeButtonInteraction(interaction: ButtonInteraction, log?: boolean): Promise<unknown>;
    /**
     * Execute select menu interacton
     * @param interaction SelectMenuInteraction
     * @param log {boolean}
     * @returns
     */
    executeSelectMenu(interaction: SelectMenuInteraction, log?: boolean): Promise<unknown>;
    /**
     * Execute context menu interacton
     * @param interaction ContextMenuInteraction
     * @param log {boolean}
     * @returns
     */
    executeContextMenu(interaction: ContextMenuInteraction, log?: boolean): Promise<unknown>;
    /**
     * Fetch prefix for message
     * @param message messsage instance
     * @returns
     */
    getMessagePrefix(message: Message): Promise<IPrefix>;
    /**
     *
     * @param prefix command prefix
     * @param message original message
     * @param caseSensitive allow insentive execution for simple commands
     * @returns
     */
    parseCommand(prefix: IPrefix, message: Message, caseSensitive?: boolean): "notCommand" | "notFound" | SimpleCommandMessage;
    /**
     * Execute the corresponding @SimpleCommand based on an message instance
     * @param message The discord.js message instance
     * @param options execution options ex. caseSensitive
     * @returns
     */
    executeCommand(message: Message, options?: {
        caseSensitive?: boolean;
        forcePrefixCheck?: boolean;
        log?: boolean;
    }): Promise<unknown>;
    /**
     * Manually trigger an event (used for tests)
     * @param event The event
     * @param params Params to inject
     * @param once Trigger an once event
     */
    trigger(event: DiscordEvents, params: any, once?: boolean): Promise<any[]>;
    /**
     * Manually build the app
     */
    build(): Promise<void>;
}
