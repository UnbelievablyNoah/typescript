import { Modifier } from "@discordx/internal";
import { DApplicationCommand, DApplicationCommandGroup, MetadataStorage, } from "../../index.js";
export function SlashGroup(groupOrSubcommands, subCommandsOrDescription, subCommands) {
    return function (target, key, descriptor) {
        const myClass = target;
        if (typeof groupOrSubcommands === "string" && key) {
            // If @SlashGroup decorate a method edit the method and add it to subgroup
            MetadataStorage.instance.addModifier(Modifier.create((original) => {
                if (original.type === "CHAT_INPUT") {
                    original.subgroup = groupOrSubcommands;
                }
            }, DApplicationCommand).decorate(myClass.constructor, key));
        }
        if (!descriptor) {
            if (typeof groupOrSubcommands === "string") {
                const group = DApplicationCommandGroup.create(groupOrSubcommands, {
                    description: typeof subCommandsOrDescription === "string"
                        ? subCommandsOrDescription
                        : undefined,
                }).decorate(myClass, key ?? myClass.name);
                MetadataStorage.instance.addApplicationCommandSlashGroups(group);
            }
            // Create a subgroup if @SlashGroup decorate a method
            if (subCommands) {
                Object.keys(subCommands).forEach((subKey) => {
                    const group = DApplicationCommandGroup.create(subKey, {
                        description: subCommands?.[subKey],
                    }).decorate(myClass, myClass.name);
                    MetadataStorage.instance.addApplicationCommandSlashSubGroups(group);
                });
            }
        }
    };
}
//# sourceMappingURL=SlashGroup.js.map