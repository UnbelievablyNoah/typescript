import { Modifier } from "@discordx/internal";
import { DApplicationCommand, DApplicationCommandOption, MetadataStorage, SlashOptionTypes, } from "../../index.js";
export function SlashOption(name, params) {
    return function (target, key, index) {
        const dType = Reflect.getMetadata("design:paramtypes", target, key)[index].name.toUpperCase();
        const type = params?.type ??
            (dType === "GUILDMEMBER"
                ? "USER"
                : dType === "TEXTCHANNEL" || dType === "VOICECHANNEL"
                    ? "CHANNEL"
                    : dType);
        // throw error if option type is invalid
        if (!SlashOptionTypes.includes(type)) {
            throw Error(`invalid slash option: ${type}\nSupported types are: ${SlashOptionTypes.join(", ")}`);
        }
        const option = DApplicationCommandOption.create(name, params?.autocomplete, params?.channelTypes, params?.description, index, params?.maxValue, params?.minValue, params?.required, type).decorate(target.constructor, key, target[key], target.constructor, index);
        MetadataStorage.instance.addModifier(Modifier.create((original) => {
            original.options = [...original.options, option];
        }, DApplicationCommand).decorate(target.constructor, key, target[key], target.constructor, index));
        MetadataStorage.instance.addApplicationCommandSlashOption(option);
    };
}
//# sourceMappingURL=SlashOption.js.map