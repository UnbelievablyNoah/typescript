import crypto from "crypto";
import { MessageEmbed } from "discord.js";
import { MetadataStorage } from "../index.js";
/**
 * Simple command message class
 */
export class SimpleCommandMessage {
    prefix;
    argString;
    message;
    info;
    splitter;
    options;
    constructor(prefix, argString, message, info, splitter) {
        this.prefix = prefix;
        this.argString = argString;
        this.message = message;
        this.info = info;
        this.splitter = splitter;
        this.options = this.info.parseParamsEx(this, splitter);
    }
    get name() {
        return this.info.name;
    }
    get description() {
        return this.info.description;
    }
    /**
     * Verify that all options are valid
     * @returns
     */
    isValid() {
        return !this.options.includes(undefined);
    }
    /**
     * get related commands
     * @returns
     */
    getRelatedCommands() {
        const commandName = this.info.name.split(" ")[0];
        if (!commandName) {
            return [];
        }
        return MetadataStorage.instance.simpleCommands.filter((cmd) => cmd.name.startsWith(commandName) && cmd.name !== this.info.name);
    }
    /**
     * send usage syntax for command
     * @returns
     */
    sendUsageSyntax() {
        const maxLength = !this.info.options.length
            ? 0
            : this.info.options.reduce((a, b) => a.name.length > b.name.length ? a : b).name.length;
        const embed = new MessageEmbed();
        embed.setColor(crypto.randomInt(654321));
        embed.setTitle("Command Info");
        embed.addField("Name", this.info.name);
        embed.addField("Description", this.info.description);
        // add aliases
        if (this.info.aliases.length) {
            embed.addField("Aliases", this.info.aliases.join(", "));
        }
        // add syntax usage
        embed.addField("Command Usage", "```" +
            this.prefix +
            this.name +
            ` ${this.info.options
                .map((op) => `{${op.name}: ${op.type}}`)
                .join(" ")}` +
            "```");
        // add options if available
        if (this.info.options.length) {
            embed.addField("Options", "```" +
                this.info.options
                    .map((op) => `${op.name.padEnd(maxLength + 2)}: ${op.description}`)
                    .join("\n") +
                "```");
        }
        return this.message.reply({ embeds: [embed] });
    }
}
//# sourceMappingURL=SimpleCommandMessage.js.map